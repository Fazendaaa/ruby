=begin
						Cyclical figurate numbers

	Triangle,  square,  pentagonal, hexagonal, heptagonal, and octagonal numbers
	are  all  figurate  (polygonal)  numbers  and are generated by the following
	formulae:

			Triangle	 	P3,n=n(n+1)/2	 	1, 3, 6, 10, 15, ...
			Square	 		P4,n=n²	 			1, 4, 9, 16, 25, ...
			Pentagonal	 	P5,n=n(3n−1)/2	 	1, 5, 12, 22, 35, ...
			Hexagonal	 	P6,n=n(2n−1)	 	1, 6, 15, 28, 45, ...
			Heptagonal	 	P7,n=n(5n−3)/2	 	1, 7, 18, 34, 55, ...
			Octagonal	 	P8,n=n(3n−2)	 	1, 8, 21, 40, 65, ...

	The  ordered  set  of  three  4-digit  numbers:  8128, 2882, 8281, has three
	interesting properties.

		1. 	The set is cyclic, in that the last two digits of each number is the
			first  two digits of the next number (including the last number with
			the first).
		2.	Each  polygonal  type:  triangle (P3,127=8128), square (P4,91=8281),
			and pentagonal (P5,44=2882), is represented by a different number in
			the set.
		3.	This is the only set of 4-digit numbers with this property.

	Find the sum of the only ordered set of six cyclic 4-digit numbers for which
	each  polygonal  type:  triangle, square, pentagonal, hexagonal, heptagonal,
	and octagonal, is represented by a different number in the set.

	Helped me out:
		*	http://stackoverflow.com/a/4094968/7092954
		*	https://zach.se/project-euler-solutions/61/
		*	http://stackoverflow.com/a/7430444/7092954
		*	http://stackoverflow.com/a/13654582/7092954
=end

require_relative '../project_euler'

def create_iterators( range, method )
	hash = Hash.new( false )
	range.each do | e | hash[ e ] = method.call( e ) end

	return hash
end

def is_cyclic( a, b ) a.to_s[ -2..-1 ] == b.to_s[ 0..1 ] end

def cyclical_figurate_numbers
	triangle = create_iterators( ( 45..140 ), method( :f_triangle ) )
	square = create_iterators( ( 32..99 ), method( :f_square ) )
	pentagonal = create_iterators( ( 26..81 ), method( :f_pentagonal ) )
	hexagonal = create_iterators( ( 23..70 ), method( :f_hexagonal ) )
	heptagonal = create_iterators( ( 21..63 ), method( :f_heptagonal ) )
	octagonal = create_iterators( ( 19..57 ), method( :f_octagonal ) )
	compare = []

	matches = catch( :END ) {
		for k1, v1 in octagonal do
			compare.push( k1 )
			
			for k2, v2 in triangle.select {
				| k, v | compare.any? { | e | e != k } && is_cyclic( v1, v ) } do
				compare.push( k2 )

				for k3, v3 in square.select {
					| k, v | compare.any? { | e | e != k }  &&
					is_cyclic( v2, v ) } do
					compare.push( k3 )

					for k4, v4 in pentagonal.select {
						| k, v | compare.any? { | e | e != k }  &&
						is_cyclic( v3, v ) } do
						compare.push( k4 )
						
						for k5, v5 in hexagonal.select {
							| k, v | compare.any? { | e | e != k }  &&
							is_cyclic( v4, v ) } do
							compare.push( k5 )
							
							for k6, v6 in heptagonal.select {
								| k, v | compare.any? { | e | e != k }  &&
								is_cyclic( v5, v ) } do

								if is_cyclic( v6, v1 ) then
									throw :END, [ v1, v2, v3, v4, v5, v6 ]
								end
							end
							compare.pop	# => remove k5
						end
						compare.pop	# => remove k4
					end
					compare.pop	# => remove k3
				end
				compare.pop	# => remove k2
			end
			compare.pop	# => remove k1
		end
	}

	return matches
end

puts cyclical_figurate_numbers.reduce( :+ )
